  <div class="header-div">
  <%# create a logic to display city name that was created %>
    <h1><strong><%= @map.city %></strong></h1>

    <%= simple_form_for([@map, @new_pot_loc]) do |f| %>
      <div class="form-inputs">
        <%= f.input :address, label: false,  placeholder: "Where are you thinking of moving?" %>
      </div>

      <div class="form-actions">
        <%= f.button :submit %>
      </div>
    <% end %>

    <ul> </ul>
    <div>
    <%  @pot_locs.each do |loc| %>
      <li><%= loc.address %></li>
    <% end %>
    </div>
    </ul>
  </div>
<%# radio buttons %>
<%# Map goes here %>
<%# link to POI page %>
<%# link to compare page %>
<div class="map-toggle">
    <div
      id="map"
      data-controller="map"
      data-map-address-value="<%= @address %>"
      data-map-markers-value="<%= @markers.to_json %>"
      data-map-target="content"
      >
    </div>

    <div class="toggle-div">
      <div class="toggle-card">
          <p> Filter by Address Book:</p>
          <% PointOfInterest::CATEGORIES.each do |category| %>
            <div class="form-check form-switch">
              <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
              <label class="form-check-label" for="flexSwitchCheckDefault"> <%= category %></label>
            </div>
          <% end %>
      </div>

      <div class="toggle-card">
        <p> Filter by Amenities:</p>
        <% PointOfInterest::AMENITIES.each do |amenity| %>
        <div class="form-check form-switch">
          <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
          <label class="form-check-label" for="flexSwitchCheckDefault"> <%= amenity %></label>
        </div>
       <% end %>
      </div>
    </div>

</div>

<%# THIS SCRIPT BELOW IS TEMPORARILY PLACED IN SHOW.HTML.ERB - DO NOT DELETE %>
<script>
  (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
    key: "<%= ENV['GOOGLE_API'] %>",
    v: "weekly",
    // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
    // Add other bootstrap parameters as needed, using camel case.
  });
</script>
